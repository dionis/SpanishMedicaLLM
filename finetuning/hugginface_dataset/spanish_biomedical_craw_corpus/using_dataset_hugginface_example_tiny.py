# -*- coding: utf-8 -*-
"""using_dataset_hugginface.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soGxkZu4antYbYG23GioJ6zoSt_GhSNT
"""

"""**Hugginface loggin for push on Hub**"""
###
#
#  Used bibliografy:
#    https://huggingface.co/learn/nlp-course/chapter5/5
#
###

import os
import time
import math
from huggingface_hub import login
from datasets import load_dataset, concatenate_datasets
from functools import reduce
from pathlib import Path
import pandas as pd


# Load model directly
from transformers import AutoTokenizer, AutoModelForCausalLM

HF_TOKEN = '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'
DATASET_TO_LOAD = 'CoWeSe.txt'
EXAMPLE_DATASET_TO_LOAD = 'example.txt'
DATASET_TO_UPDATE = 'somosnlp/spanish_medica_llm'

#Loggin to Huggin Face
login(token = HF_TOKEN)

royalListOfCode = {}
issues_path = 'dataset'
tokenizer = AutoTokenizer.from_pretrained("DeepESP/gpt2-spanish-medium")
DATASET_SOURCE_ID = '4'

EXPETIMENT_DOCUMENT_SIZE = 8
#Read current path
path = Path(__file__).parent.absolute()

'''
  Bibliografy:
    https://www.w3schools.com/python/python_mysql_getstarted.asp
    https://www.w3schools.com/python/python_mysql_select.as

'''

    # raw_text: Texto asociado al documento, pregunta, caso clínico u otro tipo de información.

    # topic: (puede ser healthcare_treatment, healthcare_diagnosis, tema, respuesta a pregunta, o estar vacío p.ej en el texto abierto)

    # speciality: (especialidad médica a la que se relaciona el raw_text p.ej: cardiología, cirugía, otros)

    # raw_text_type: (puede ser caso clínico, open_text, question)

    # topic_type: (puede ser medical_topic, medical_diagnostic,answer,natural_medicine_topic, other, o vacio)

    # source: Identificador de la fuente asociada al documento que aparece en el README y descripción del dataset.

    # country: Identificador del país de procedencia de la fuente (p.ej.; ch, es) usando el estándar ISO 3166-1 alfa-2 (Códigos de país de dos letras.).
cantemistDstDict = {
  'raw_text': '',
  'topic': '',
  'speciallity': '',
  'raw_text_type': 'open_text',
  'topic_type': '',
  'source': DATASET_SOURCE_ID,
  'country': 'es',
  'document_id': ''
}

totalOfTokens = 0
corpusToLoad = []
countCopySeveralDocument = 0
counteOriginalDocument = 0

FILE_TO_PROCESS = DATASET_TO_LOAD

if not os.path.exists(str(path) + os.sep + FILE_TO_PROCESS):
   FILE_TO_PROCESS = EXAMPLE_DATASET_TO_LOAD

with open( str(path) + os.sep + FILE_TO_PROCESS,encoding='utf8') as file:
  #linesInFile = file.readlines()
  paragraph = ''
  fileToWrite = open(f"{str(path)}{os.sep}tinyExample_{FILE_TO_PROCESS}",encoding='utf8')
  while True:
        linesInFile = file.readlines(8192)
        if not linesInFile:
            break
        for index, iLine in enumerate(linesInFile): 
          fileToWrite(linesInFile[index])

        counteOriginalDocument += 1

        if counteOriginalDocument > EXPETIMENT_DOCUMENT_SIZE:
             break

fileToWrite.close()
        





